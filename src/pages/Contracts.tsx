import React, { useState } from 'react';
import { FileText, ArrowRight, Download, Check } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { Link } from 'react-router-dom';
import { contractTemplates, contractCategories } from '../data/contracts';
import { Contract, ContractData } from '../types';
import jsPDF from 'jspdf';

export default function Contracts() {
  const { user } = useAuth();
  const [selectedContract, setSelectedContract] = useState<Contract | null>(null);
  const [formData, setFormData] = useState<Record<string, string>>({});
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContract, setGeneratedContract] = useState<string | null>(null);

  const isCEO = user?.id === 'ceo-admin';

  // Redirect non-premium users
  if (!user?.isPremium && !isCEO) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md mx-auto text-center p-8 bg-white rounded-xl shadow-lg">
          <div className="bg-gold-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
            <FileText className="h-8 w-8 text-gold-600" />
          </div>
          <h2 className="font-serif font-bold text-2xl text-navy-500 mb-4">Premium Feature</h2>
          <p className="text-gray-600 mb-6">
            Contract generation is available for Premium users only. Upgrade to access all contract templates and AI-powered generation.
          </p>
          <Link
            to="/pricing"
            className="inline-flex items-center space-x-2 bg-navy-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-navy-600 transition-colors"
          >
            <span>Upgrade to Premium</span>
            <ArrowRight className="h-4 w-4" />
          </Link>
        </div>
      </div>
    );
  }

  const handleInputChange = (name: string, value: string) => {
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const generateAIContract = async (contractType: string, formData: Record<string, string>) => {
    // Simulate AI contract generation
    setIsGenerating(true);
    
    // Mock AI response - in real implementation, this would call your AI API
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const mockContract = `
${contractType.toUpperCase().replace('-', ' ')} AGREEMENT

This ${contractType.replace('-', ' ')} Agreement ("Agreement") is entered into on ${formData.effectiveDate || formData.startDate || new Date().toLocaleDateString()}, between:

PARTY A: ${Object.values(formData)[0] || 'Party A'}
PARTY B: ${Object.values(formData)[1] || 'Party B'}

WHEREAS, the parties wish to enter into this legally binding agreement;

NOW, THEREFORE, in consideration of the mutual covenants contained herein, the parties agree as follows:

1. DEFINITIONS AND INTERPRETATION
   1.1 In this Agreement, the following terms shall have the meanings set forth below:
   ${contractType === 'nda' ? '"Confidential Information" means any and all non-public information disclosed by one party to the other.' : ''}

2. OBLIGATIONS AND RESPONSIBILITIES
   2.1 Each party agrees to perform their obligations under this Agreement in good faith.
   ${Object.entries(formData).map(([key, value]) => `2.2 ${key}: ${value}`).join('\n   ')}

3. TERM AND TERMINATION
   3.1 This Agreement shall remain in effect for the period specified herein.
   3.2 Either party may terminate this Agreement with written notice.

4. GOVERNING LAW
   4.1 This Agreement shall be governed by the laws of ${formData.jurisdiction || 'the applicable jurisdiction'}.

5. ENTIRE AGREEMENT
   5.1 This Agreement constitutes the entire agreement between the parties.

IN WITNESS WHEREOF, the parties have executed this Agreement as of the date first written above.

_________________________                    _________________________
${Object.values(formData)[0] || 'Party A'}                           ${Object.values(formData)[1] || 'Party B'}
Signature                                    Signature

_________________________                    _________________________
Date                                         Date


Generated by Legal.ai â€” Powered by Hayshan
Professional Legal Document Generation Platform
`;
    
    setGeneratedContract(mockContract);
    setIsGenerating(false);
  };

  const handleGenerateContract = async () => {
    if (!selectedContract) return;
    
    await generateAIContract(selectedContract.type, formData);
  };

  const downloadPDF = () => {
    if (!generatedContract || !selectedContract) return;

    const doc = new jsPDF();
    const pageHeight = doc.internal.pageSize.height;
    const margin = 20;
    const lineHeight = 7;
    let currentY = margin;

    // Title
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text(selectedContract.title.toUpperCase(), margin, currentY);
    currentY += lineHeight * 2;

    // Contract content
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    const lines = doc.splitTextToSize(generatedContract, 170);
    
    for (const line of lines) {
      if (currentY > pageHeight - margin) {
        doc.addPage();
        currentY = margin;
      }
      doc.text(line, margin, currentY);
      currentY += lineHeight;
    }

    doc.save(`${selectedContract.type}-agreement.pdf`);
  };

  if (generatedContract && selectedContract) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="bg-white rounded-xl shadow-lg overflow-hidden">
            <div className="bg-navy-500 text-white p-6">
              <div className="flex items-center justify-between">
                <div>
                  <h1 className="font-serif font-bold text-2xl">{selectedContract.title}</h1>
                  <p className="text-gray-200">Generated Contract</p>
                </div>
                <div className="flex items-center space-x-4">
                  <button
                    onClick={downloadPDF}
                    className="flex items-center space-x-2 bg-gold-500 text-white px-4 py-2 rounded-lg hover:bg-gold-600 transition-colors"
                  >
                    <Download className="h-4 w-4" />
                    <span>Download PDF</span>
                  </button>
                  <button
                    onClick={() => {
                      setGeneratedContract(null);
                      setSelectedContract(null);
                      setFormData({});
                    }}
                    className="text-gray-300 hover:text-white transition-colors"
                  >
                    Generate New
                  </button>
                </div>
              </div>
            </div>

            <div className="p-6">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                <div className="flex items-center space-x-2">
                  <Check className="h-5 w-5 text-green-600" />
                  <span className="text-green-800 font-medium">Contract Generated Successfully</span>
                </div>
                <p className="text-green-600 text-sm mt-1">
                  Your contract has been generated with Harvard-level legal expertise. Review and download when ready.
                </p>
              </div>

              <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
                <pre className="whitespace-pre-wrap font-mono text-sm text-gray-800 leading-relaxed">
                  {generatedContract}
                </pre>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (selectedContract) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="bg-white rounded-xl shadow-lg overflow-hidden">
            <div className="bg-navy-500 text-white p-6">
              <button
                onClick={() => setSelectedContract(null)}
                className="text-gray-300 hover:text-white mb-4 flex items-center space-x-2"
              >
                <ArrowRight className="h-4 w-4 rotate-180" />
                <span>Back to Templates</span>
              </button>
              <h1 className="font-serif font-bold text-2xl">{selectedContract.title}</h1>
              <p className="text-gray-200">{selectedContract.description}</p>
            </div>

            <div className="p-6">
              <div className="space-y-6">
                {selectedContract.fields.map((field) => (
                  <div key={field.name}>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      {field.label}
                      {field.required && <span className="text-red-500 ml-1">*</span>}
                    </label>
                    {field.type === 'textarea' ? (
                      <textarea
                        required={field.required}
                        placeholder={field.placeholder}
                        value={formData[field.name] || ''}
                        onChange={(e) => handleInputChange(field.name, e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-navy-500 focus:border-transparent"
                        rows={4}
                      />
                    ) : (
                      <input
                        type={field.type}
                        required={field.required}
                        placeholder={field.placeholder}
                        value={formData[field.name] || ''}
                        onChange={(e) => handleInputChange(field.name, e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-navy-500 focus:border-transparent"
                      />
                    )}
                  </div>
                ))}
              </div>

              <div className="mt-8">
                <button
                  onClick={handleGenerateContract}
                  disabled={isGenerating}
                  className="w-full bg-navy-500 text-white py-4 rounded-lg font-semibold text-lg hover:bg-navy-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center space-x-2"
                >
                  {isGenerating ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      <span>Generating Contract...</span>
                    </>
                  ) : (
                    <>
                      <FileText className="h-5 w-5" />
                      <span>Generate Contract</span>
                    </>
                  )}
                </button>
                <p className="text-sm text-gray-500 text-center mt-2">
                  Contract will be generated with Harvard-level legal expertise
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="text-center mb-12">
          <h1 className="font-serif font-bold text-3xl md:text-4xl text-navy-500 mb-4">
            Contract Generator
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Choose from 25+ professional contract templates across 7 categories, each crafted with Harvard-level legal expertise
          </p>
        </div>

        {/* Contract Categories */}
        <div className="space-y-12">
          {contractCategories.map((category, categoryIndex) => {
            const categoryContracts = contractTemplates.filter(contract => 
              category.contracts.includes(contract.id)
            );
            
            return (
              <div key={categoryIndex} className="bg-white rounded-xl shadow-lg p-8">
                <div className="mb-8">
                  <h2 className="font-serif font-bold text-2xl text-navy-500 mb-2">
                    {category.name}
                  </h2>
                  <p className="text-gray-600 text-lg">
                    {category.description}
                  </p>
                  <div className="text-sm text-gold-600 font-medium mt-2">
                    {categoryContracts.length} Templates Available
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {categoryContracts.map((contract) => (
                    <div
                      key={contract.id}
                      className="bg-gray-50 rounded-lg p-6 hover:bg-white hover:shadow-md transition-all duration-300 transform hover:-translate-y-1 cursor-pointer border border-gray-100"
                      onClick={() => setSelectedContract(contract)}
                    >
                      <div className="bg-navy-100 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4">
                        <FileText className="h-6 w-6 text-navy-500" />
                      </div>
                      <h3 className="font-serif font-bold text-lg text-navy-500 text-center mb-2">
                        {contract.title}
                      </h3>
                      <p className="text-gray-600 text-center text-sm mb-4 leading-relaxed">
                        {contract.description}
                      </p>
                      <div className="flex items-center justify-center text-navy-500 group">
                        <span className="font-medium text-sm">Generate Contract</span>
                        <ArrowRight className="h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform" />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            );
          })}
        </div>

        <div className="mt-12 bg-gradient-to-r from-gold-500 to-gold-600 rounded-xl p-8 text-white text-center">
          <h2 className="font-serif font-bold text-2xl mb-4">Professional Legal Documents</h2>
          <p className="text-gold-100 mb-6 max-w-2xl mx-auto">
            {isCEO 
              ? 'ðŸ”‘ CEO Access: Generate unlimited professional contracts from 25+ Harvard-level templates with AI. All documents include signature lines and professional formatting.'
              : 'All contracts are generated with Harvard-trained AI and are legally binding when properly executed. Choose from 25+ professional templates with signature lines and formatting.'
            }
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
            <div className="flex items-center space-x-2">
              <Check className="h-5 w-5" />
              <span>Harvard-level Quality</span>
            </div>
            <div className="flex items-center space-x-2">
              <Check className="h-5 w-5" />
              <span>25+ Contract Types</span>
            </div>
            <div className="flex items-center space-x-2">
              <Check className="h-5 w-5" />
              <span>7 Legal Categories</span>
            </div>
            <div className="flex items-center space-x-2">
              <Check className="h-5 w-5" />
              <span>PDF Export Ready</span>
            </div>
            <div className="flex items-center space-x-2">
              <Check className="h-5 w-5" />
              <span>Legally Sound</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}